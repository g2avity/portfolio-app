generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  firstName      String
  lastName       String
  birthDate      DateTime?
  phone          String?
  address        String?
  city           String?
  state          String?
  country        String?
  bio            String?
  linkedinUrl    String?
  githubUrl      String?
  websiteUrl     String?
  avatarUrl      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isPublic       Boolean         @default(false)
  portfolioSlug  String?         @unique
  username       String          @unique
  accounts       Account[]
  customSections CustomSection[]
  experiences    Experience[]
  sessions       Session[]
  skills         Skill[]
  starMemos      StarMemo[]

  @@map("users")
}

model Experience {
  id          String    @id @default(cuid())
  title       String
  companyName String
  description String
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean   @default(false)
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Skill {
  id                String   @id @default(cuid())
  name              String
  description       String
  category          String?
  proficiency       Int?     @default(1)
  yearsOfExperience Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model StarMemo {
  id        String   @id @default(cuid())
  situation String
  task      String
  action    String
  result    String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("star_memos")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  password          String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model CustomSection {
  id          String   @id @default(cuid())
  userId      String
  title       String
  slug        String
  type        String
  description String?
  isPublic    Boolean  @default(true)
  order       Int
  layout      String   @default("default")
  content     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, slug])
  @@map("custom_sections")
}
