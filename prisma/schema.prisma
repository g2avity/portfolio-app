// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  username    String        @unique
  email       String        @unique
  firstName   String
  lastName    String
  birthDate   DateTime?
  phone       String?
  address     String?
  city        String?
  state       String?
  country     String?
  bio         String?       @db.Text
  linkedinUrl String?
  githubUrl   String?
  websiteUrl  String?
  avatarUrl   String?
  
  // Public profile settings
  isPublic    Boolean       @default(false)
  portfolioSlug String?     @unique
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  experiences Experience[]
  skills      Skill[]
  starMemos   StarMemo[]
  
  // Authentication relationships
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Experience {
  id          String   @id @default(cuid())
  title       String
  companyName String
  description String   @db.Text
  startDate   DateTime
  endDate     DateTime?
  isCurrent   Boolean  @default(false)
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign key relationship to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  category    String?
  proficiency Int?     @default(1) // 1-5 scale
  yearsOfExperience Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign key relationship to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model StarMemo {
  id        String   @id @default(cuid())
  situation String   @db.Text
  task      String   @db.Text
  action    String   @db.Text
  result    String   @db.Text
  title     String?  // Optional title for the STAR memo
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key relationship to User
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("star_memos")
}

// Authentication models for remix-auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  password          String? // For credentials-based authentication
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
